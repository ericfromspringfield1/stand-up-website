{"ast":null,"code":"import _defineProperty from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _get$getAll$getAll$po;\n\nvar remoteURL = \"http://localhost:8088\";\nexport default (_get$getAll$getAll$po = {\n  get: function get(id) {\n    return fetch(\"\".concat(remoteURL, \"/gigs/\").concat(id)).then(function (result) {\n      return result.json();\n    });\n  },\n  getAll: function getAll(userId) {\n    return fetch(\"\".concat(remoteURL, \"/gigs?userId=\").concat(userId)).then(function (result) {\n      return result.json();\n    });\n  }\n}, _defineProperty(_get$getAll$getAll$po, \"getAll\", function getAll(venueId) {\n  return fetch(\"\".concat(remoteURL, \"/gigs?userId=\").concat(venueId)).then(function (result) {\n    return result.json();\n  });\n}), _defineProperty(_get$getAll$getAll$po, \"post\", function post(newGig) {\n  return fetch(\"\".concat(remoteURL, \"/gigs\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newGig)\n  }).then(function (data) {\n    return data.json();\n  });\n}), _defineProperty(_get$getAll$getAll$po, \"update\", function update(editedGig) {\n  return fetch(\"\".concat(remoteURL, \"/gigs/\").concat(editedGig.id), {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(editedGig)\n  }).then(function (data) {\n    return data.json();\n  });\n}), _defineProperty(_get$getAll$getAll$po, \"delete\", function _delete(id) {\n  return fetch(\"http://localhost:8088/gigs/\".concat(id), {\n    method: \"DELETE\"\n  }).then(function (result) {\n    return result.json();\n  });\n}), _get$getAll$getAll$po);","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/modules/GigsManager.js"],"names":["remoteURL","get","id","fetch","then","result","json","getAll","userId","venueId","newGig","method","headers","body","JSON","stringify","data","editedGig"],"mappings":";;;;AAAA,IAAMA,SAAS,GAAG,uBAAlB;AAEA;AACEC,EAAAA,GADF,eACMC,EADN,EACU;AACN,WAAOC,KAAK,WAAIH,SAAJ,mBAAsBE,EAAtB,EAAL,CAAiCE,IAAjC,CAAsC,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,IAAP,EAAJ;AAAA,KAA5C,CAAP;AACD,GAHH;AAIEC,EAAAA,MAJF,kBAISC,MAJT,EAIiB;AACb,WAAOL,KAAK,WAAIH,SAAJ,0BAA6BQ,MAA7B,EAAL,CAA4CJ,IAA5C,CAAiD,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,IAAP,EAAJ;AAAA,KAAvD,CAAP;AACD;AANH,oEAOSG,OAPT,EAOkB;AACd,SAAON,KAAK,WAAIH,SAAJ,0BAA6BS,OAA7B,EAAL,CAA6CL,IAA7C,CAAkD,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,IAAP,EAAJ;AAAA,GAAxD,CAAP;AACD,CATH,gEAWOI,MAXP,EAWe;AACX,SAAOP,KAAK,WAAIH,SAAJ,YAAsB;AAC9BW,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFqB;AAK9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALwB,GAAtB,CAAL,CAMJN,IANI,CAMC,UAAAY,IAAI;AAAA,WAAIA,IAAI,CAACV,IAAL,EAAJ;AAAA,GANL,CAAP;AAOH,CAnBD,oEAqBSW,SArBT,EAqBoB;AAChB,SAAOd,KAAK,WAAIH,SAAJ,mBAAsBiB,SAAS,CAACf,EAAhC,GAAsC;AAChDS,IAAAA,MAAM,EAAE,KADwC;AAEhDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFuC;AAKhDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,SAAf;AAL0C,GAAtC,CAAL,CAMJb,IANI,CAMC,UAAAY,IAAI;AAAA,WAAIA,IAAI,CAACV,IAAL,EAAJ;AAAA,GANL,CAAP;AAOD,CA7BH,qEA+BSJ,EA/BT,EA+Ba;AACP,SAAOC,KAAK,sCAA+BD,EAA/B,GAAqC;AAC7CS,IAAAA,MAAM,EAAE;AADqC,GAArC,CAAL,CAGNP,IAHM,CAGD,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,IAAP,EAAJ;AAAA,GAHL,CAAP;AAID,CApCL","sourcesContent":["const remoteURL = \"http://localhost:8088\"\n\nexport default {\n  get(id) {\n    return fetch(`${remoteURL}/gigs/${id}`).then(result => result.json())\n  },\n  getAll(userId) {\n    return fetch(`${remoteURL}/gigs?userId=${userId}`).then(result => result.json())\n  },\n  getAll(venueId) {\n    return fetch(`${remoteURL}/gigs?userId=${venueId}`).then(result => result.json())\n  },\n  \n  post(newGig) {\n    return fetch(`${remoteURL}/gigs`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newGig)\n    }).then(data => data.json())\n},\n\n  update(editedGig) {\n    return fetch(`${remoteURL}/gigs/${editedGig.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(editedGig)\n    }).then(data => data.json());\n  },\n  \n  delete(id) {\n      return fetch(`http://localhost:8088/gigs/${id}`, {\n          method: \"DELETE\"\n      })\n      .then(result => result.json())\n    }\n\n}"]},"metadata":{},"sourceType":"module"}