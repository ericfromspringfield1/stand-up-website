{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Audiences/AudiencesEditForm.js\";\nimport React, { Component } from \"react\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport \"./AudiencesForm.css\";\n\nvar AudiencesEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AudiencesEditForm, _Component);\n\n  function AudiencesEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AudiencesEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AudiencesEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      audience: \"\",\n      loadingStatus: true\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.updateExistingAudience = function (evt) {\n      evt.preventDefault();\n\n      _this.setState({\n        loadingStatus: true\n      });\n\n      var editedAudience = {\n        audience: _this.state.audience,\n        date: _this.state.date,\n        id: _this.props.match.params.audienceId,\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      };\n      AudiencesManager.update(editedAudience).then(function () {\n        return _this.props.history.push(\"/audiences\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AudiencesEditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AudiencesManager.get(this.props.match.params.audienceId).then(function (audience) {\n        _this2.setState({\n          audience: audience.audience,\n          loadingStatus: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"audience\",\n        value: this.state.audience,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Type of Audience\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"rating\",\n        value: this.state.rating,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"rating\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Rating\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.updateExistingAudience,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return AudiencesEditForm;\n}(Component);\n\nexport default AudiencesEditForm;\n{\n  /* <div>\n         <button>Show menu</button>\n          {this.state.showMenu (\n           <div className=\"menu\">\n             <button> Hot </button>\n             <button> Cold</button>\n             <button> Corporate </button>\n             <button> Thin </button>\n             <button> Engaged </button>\n             <button> A Buncha Drunks </button>\n             <button> A Buncha Hecklers </button>\n           </div>\n         ) : null}\n       </div> */\n}","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Audiences/AudiencesEditForm.js"],"names":["React","Component","AudiencesManager","AudiencesEditForm","state","audience","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","updateExistingAudience","preventDefault","editedAudience","date","props","match","params","audienceId","userId","parseInt","sessionStorage","getItem","update","then","history","push","get","rating"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport AudiencesManager from \"../../modules/AudiencesManager\"\nimport \"./AudiencesForm.css\"\n\nclass AudiencesEditForm extends Component {\n    //set the initial state\n    state = {\n      audience: \"\",\n      loadingStatus: true,\n    };\n\n    handleFieldChange = evt => {\n      const stateToChange = {}\n      stateToChange[evt.target.id] = evt.target.value\n      this.setState(stateToChange)\n    }\n\n    updateExistingAudience = evt => {\n      evt.preventDefault()\n      this.setState({ loadingStatus: true });\n      const editedAudience = {\n        audience: this.state.audience,\n        date: this.state.date,\n        id: this.props.match.params.audienceId,\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      };\n\n      AudiencesManager.update(editedAudience)\n      .then(() => this.props.history.push(\"/audiences\"))\n    }\n\n    componentDidMount() {\n      AudiencesManager.get(this.props.match.params.audienceId)\n      .then(audience => {\n          this.setState({\n            audience: audience.audience,\n            loadingStatus: false,\n          });\n      });\n    }\n\n    render() {\n      return (\n        <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"audience\"\n                value={this.state.audience}\n              />\n              <label htmlFor=\"audience\">Type of Audience</label>\n\n              <input\n                type=\"date\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                value={this.state.date}\n              />\n              <label htmlFor=\"date\">Date</label>\n            </div>\n\n              <input\n                type=\"text\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"rating\"\n                value={this.state.rating}\n              />\n              <label htmlFor=\"rating\">Rating</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\" disabled={this.state.loadingStatus}\n                onClick={this.updateExistingAudience}\n                className=\"btn btn-primary\"\n              >Submit</button>\n            </div>\n          </fieldset>\n        </form>\n        </>\n      );\n    }\n}\n\nexport default AudiencesEditForm\n\n{/* <div>\n        <button>Show menu</button>\n\n        {this.state.showMenu (\n          <div className=\"menu\">\n            <button> Hot </button>\n            <button> Cold</button>\n            <button> Corporate </button>\n            <button> Thin </button>\n            <button> Engaged </button>\n            <button> A Buncha Drunks </button>\n            <button> A Buncha Hecklers </button>\n          </div>\n        ) : null}\n      </div> */}"]},"metadata":{},"sourceType":"module"}