{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\n\nvar GigsEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsEditForm, _Component);\n\n  function GigsEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gig: \"\",\n      date: \"\",\n      venues: [],\n      audiences: [],\n      spots: [],\n      loadingStatus: false\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.updateExistingGig = function (evt) {\n      evt.preventDefault();\n      var editedGig = {\n        name: _this.state.name,\n        date: _this.state.date,\n        venueId: _this.state.match.params.venue.id,\n        audienceId: _this.props.match.params.audience.id,\n        spotId: _this.props.match.params.spot.id,\n        id: _this.props.match.params.id,\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      };\n      GigsManager.update(editedGig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n\n      _this.setState({\n        loadingStatus: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsEditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      GigsManager.get(this.props.match.params.gigId).then(function (gig) {\n        _this2.setState({\n          name: gig.name,\n          date: gig.date,\n          venueId: _this2.props.match.params.taskId,\n          audienceId: _this2.state.audience.id,\n          spotId: _this2.state.spot.id,\n          loadingStatus: false\n        });\n\n        var loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\"));\n        GigsManager.getAll(loggedInUserGig).then(function (gigs) {\n          return _this2.setState({\n            gigs: gigs\n          });\n        });\n        var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n        VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n          return _this2.setState({\n            venues: venues\n          });\n        });\n        var loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(function (audiences) {\n          return _this2.setState({\n            audiences: audiences\n          });\n        });\n        var loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n        SpotsManager.getAll(loggedInUserSpot).then(function (spots) {\n          return _this2.setState({\n            spots: spots\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"gig\",\n        value: this.state.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.updateExistingGig,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsEditForm;\n}(Component);\n\nexport default GigsEditForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js"],"names":["React","Component","GigsManager","GigsEditForm","state","gig","date","venues","audiences","spots","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","updateExistingGig","preventDefault","editedGig","name","venueId","match","params","venue","audienceId","props","audience","spotId","spot","userId","parseInt","sessionStorage","getItem","update","then","history","push","get","gigId","taskId","loggedInUserGig","getAll","gigs","loggedInUserVenue","VenuesManager","loggedInUserAudience","AudiencesManager","loggedInUserSpot","SpotsManager"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\n\nclass GigsEditForm extends Component {\n  //set the initial state\n  state = {\n    gig: \"\",\n    date: \"\",\n    venues: [],\n    audiences: [],\n    spots: [],\n    loadingStatus: false\n  };\n\n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n\n  updateExistingGig = evt => {\n    evt.preventDefault();\n    const editedGig = {\n      name: this.state.name,\n      date: this.state.date,\n      venueId: this.state.match.params.venue.id,\n      audienceId: this.props.match.params.audience.id,\n      spotId: this.props.match.params.spot.id,\n      id: this.props.match.params.id,\n      userId: parseInt(sessionStorage.getItem(\"credentials\"))\n    };\n\n    GigsManager.update(editedGig).then(() => this.props.history.push(\"/gigs\"));\n    this.setState({ loadingStatus: true });\n  };\n\n  componentDidMount() {\n    GigsManager.get(this.props.match.params.gigId).then(gig => {\n      this.setState({\n        name: gig.name,\n        date: gig.date,\n        venueId: this.props.match.params.taskId,\n        audienceId: this.state.audience.id,\n        spotId: this.state.spot.id,\n        loadingStatus: false\n      });\n\n      const loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\"));\n      GigsManager.getAll(loggedInUserGig).then(gigs =>\n        this.setState({ gigs: gigs })\n      );\n      const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n      VenuesManager.getAll(loggedInUserVenue).then(venues =>\n        this.setState({ venues: venues })\n        );\n        const loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(audiences =>\n          this.setState({ audiences: audiences })\n          );\n          const loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n          SpotsManager.getAll(loggedInUserSpot).then(spots =>\n            this.setState({ spots: spots })\n            );\n          });\n        }         \n  \n  \n  \n  \n  render() {  \n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"gig\"\n                value={this.state.name}\n                />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                value={this.state.date}\n              />\n              <label htmlFor=\"date\">Date</label>\n              </div>\n\n            {/* <select\n            type=\"select\"\n            required\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.gig.venueId}\n              onChange={this.handleFieldChange}\n              >\n              {this.state.venue.map(venue => (\n                <option key={venue.id} value={this.state.venueId}>\n                  {venue.name}\n                </option>\n              ))}\n              <label htmlFor=\"venue\">Venue</label>\n              </select> */}\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.updateExistingGig}\n                className=\"btn btn-primary\"\n                >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n    </>\n    );\n  }\n}\n\nexport default GigsEditForm;\n"]},"metadata":{},"sourceType":"module"}