{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\nvar GigsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsForm, _Component);\n\n  function GigsForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gig: \"\",\n      date: \"\",\n      venues: [],\n      audiences: [],\n      spots: [],\n      loadingStatus: false\n    };\n\n    _this.constructNewGig = function (evt) {\n      evt.preventDefault();\n\n      _this.setState({\n        loadingStatus: true\n      });\n\n      var gig = {\n        name: _this.state.name,\n        date: _this.state.date,\n        venuedId: _this.state,\n        audienceId: _this.state.venueId,\n        spotId: parseInt(sessionStorage.getItem(\"spot\")),\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      };\n      GigsManager.post(gig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n      VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n        return _this2.setState({\n          venues: venues\n        });\n      });\n      AudiencesManager.getAll().then(function (audiences) {\n        return _this2.setState({\n          audiences: audiences\n        });\n      });\n      SpotsManager.getAll().then(function (spots) {\n        return _this2.setState({\n          spots: spots\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n\n    /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n    */\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        placeholder: \"Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        placeholder: \"Date Of Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"venueId\",\n        value: this.state.venueId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.venues.map(function (venue) {\n        return React.createElement(\"option\", {\n          key: venue.id,\n          value: venue.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, venue.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Venue\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"audienceId\",\n        value: this.state.audienceId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.audiences.map(function (audience) {\n        return React.createElement(\"option\", {\n          key: audience.id,\n          value: audience.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, audience.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Audience Type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"spotId\",\n        value: this.state.spotId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.spots.map(function (spot) {\n        return React.createElement(\"option\", {\n          key: spot.id,\n          value: spot.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, spot.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"spot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Spot Order\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.constructNewGig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsForm;\n}(Component);\n\nexport default GigsForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsForm","state","gig","date","venues","audiences","spots","loadingStatus","constructNewGig","evt","preventDefault","setState","name","venuedId","audienceId","venueId","spotId","parseInt","sessionStorage","getItem","userId","post","then","props","history","push","handleFieldChange","stateToChange","target","id","value","loggedInUserVenue","getAll","map","venue","audience","spot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\n\nclass GigsForm extends Component {\n  state = { \n    gig: \"\",\n    date: \"\",\n    venues: [],\n    audiences: [],\n    spots: [],\n    loadingStatus: false \n  };\n\n  constructNewGig = evt => {\n   evt.preventDefault();\n   \n      this.setState({ loadingStatus: true });\n      const gig = {   \n        name: this.state.name,\n        date: this.state.date,\n        venuedId: this.state,\n        audienceId: this.state.venueId,\n        spotId: parseInt(sessionStorage.getItem(\"spot\")),\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      }\n      GigsManager.post(gig).then(() => this.props.history.push(\"/gigs\"));\n    }\n    \n    componentDidMount() {\n      const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\")); \n       VenuesManager.getAll(loggedInUserVenue).then(venues =>\n       this.setState({ venues: venues })\n       );\n\n       AudiencesManager.getAll().then(audiences =>\n       this.setState({ audiences: audiences })\n       );\n\n       SpotsManager.getAll().then(spots =>\n        this.setState({ spots: spots })\n        );\n      \n    \n  }\n        \n        \n                \n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n  \n  /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n  */\n\n  render() {\n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"name\"\n                placeholder=\"Gig\"\n              />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                placeholder=\"Date Of Gig\"\n              />\n              <label htmlFor=\"date\">Date</label>\n            </div>\n\n            <select\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.venueId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.venues.map(venue => (\n                <option key={venue.id} value={venue.id}>\n                  {venue.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"venue\">Venue</label>\n\n            <select\n              className=\"form-control\"\n              id=\"audienceId\"\n              value={this.state.audienceId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.audiences.map(audience => (\n                <option key={audience.id} value={audience.id}>\n                  {audience.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"audience\">Audience Type</label>\n\n            <select\n              className=\"form-control\"\n              id=\"spotId\"\n              value={this.state.spotId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.spots.map(spot => (\n                <option key={spot.id} value={spot.id}>\n                  {spot.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"spot\">Spot Order</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.constructNewGig}\n              >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default GigsForm;\n"]},"metadata":{},"sourceType":"module"}