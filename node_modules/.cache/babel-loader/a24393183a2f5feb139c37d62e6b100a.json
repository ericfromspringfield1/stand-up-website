{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Tasks/TasksList.js\";\nimport React, { Component } from \"react\"; //import the components we will need\n\nimport TasksCard from \"./TasksCard\";\nimport TasksManager from \"../../modules/TasksManager\";\n\nvar TasksList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TasksList, _Component);\n\n  function TasksList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TasksList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TasksList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tasks: []\n    };\n\n    _this.deleteTask = function (id) {\n      TasksManager.delete(id).then(function () {\n        TasksManager.getAll().then(function (newTasks) {\n          _this.setState({\n            tasks: newTasks\n          });\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TasksList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"TASK LIST: ComponentDidMount\"); //getAll from TasksManager and hang on to that data; put it in state\n\n      TasksManager.getAll().then(function (tasks) {\n        _this2.setState({\n          tasks: tasks //we may want to rename as tasksObj after tasks: AS WELL AS SINGULAR TASKCARD,etc.\n\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(\"TasksList: Render\");\n      return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n        className: \"section-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: function onClick() {\n          _this3.props.history.push(\"/tasks/new\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Add Task\")), React.createElement(\"div\", {\n        className: \"container-cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, this.state.tasks.map(function (task) {\n        return React.createElement(TasksCard, Object.assign({\n          key: task.id,\n          task: task,\n          deleteTask: _this3.deleteTask\n        }, _this3.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return TasksList;\n}(Component);\n\nexport default TasksList;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Tasks/TasksList.js"],"names":["React","Component","TasksCard","TasksManager","TasksList","state","tasks","deleteTask","id","delete","then","getAll","newTasks","setState","console","log","props","history","push","map","task"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;IAEMC,S;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;UAgBRC,U,GAAa,UAAAC,EAAE,EAAI;AACjBL,MAAAA,YAAY,CAACM,MAAb,CAAoBD,EAApB,EAAwBE,IAAxB,CAA6B,YAAM;AACjCP,QAAAA,YAAY,CAACQ,MAAb,GAAsBD,IAAtB,CAA2B,UAAAE,QAAQ,EAAI;AACrC,gBAAKC,QAAL,CAAc;AACVP,YAAAA,KAAK,EAAEM;AADG,WAAd;AAGD,SAJD;AAKD,OAND;AAOD,K;;;;;;;wCApBmB;AAAA;;AAClBE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EADkB,CAElB;;AACAZ,MAAAA,YAAY,CAACQ,MAAb,GACKD,IADL,CACU,UAAAJ,KAAK,EAAI;AACX,QAAA,MAAI,CAACO,QAAL,CAAc;AACVP,UAAAA,KAAK,EAAEA,KADG,CAElB;;AAFkB,SAAd;AAIP,OAND;AAOD;;;6BAYO;AAAA;;AACNQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEA,aACI,0CACI;AAAS,QAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,IAAI,EAAC,QAAb;AACI,QAAA,SAAS,EAAC,KADd;AAEI,QAAA,OAAO,EAAE,mBAAM;AAAC,UAAA,MAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AAAuC,SAF3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,CADJ,EAQI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKb,KAAL,CAAWC,KAAX,CAAiBa,GAAjB,CAAqB,UAAAC,IAAI;AAAA,eACtB,oBAAC,SAAD;AACK,UAAA,GAAG,EAAEA,IAAI,CAACZ,EADf;AAEK,UAAA,IAAI,EAAEY,IAFX;AAGM,UAAA,UAAU,EAAE,MAAI,CAACb;AAHvB,WAIU,MAAI,CAACS,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADsB;AAAA,OAAzB,CADL,CARJ,CADJ;AAqBC;;;;EApDmBf,S;;AA6DxB,eAAeG,SAAf","sourcesContent":["import React, { Component } from \"react\";\n//import the components we will need\nimport TasksCard from \"./TasksCard\";\nimport TasksManager from \"../../modules/TasksManager\";\n\nclass TasksList extends Component {\n  //define what this component needs to render\n  state = {\n    tasks: []\n  };\n\n  componentDidMount() {\n    console.log(\"TASK LIST: ComponentDidMount\");\n    //getAll from TasksManager and hang on to that data; put it in state\n    TasksManager.getAll()\n        .then(tasks => {\n            this.setState({\n                tasks: tasks\n        //we may want to rename as tasksObj after tasks: AS WELL AS SINGULAR TASKCARD,etc.\n      });\n    });\n  }\n  \n  deleteTask = id => {\n    TasksManager.delete(id).then(() => {\n      TasksManager.getAll().then(newTasks => {\n        this.setState({\n            tasks: newTasks\n        });\n      });\n    });\n  };\n\n  render(){\n    console.log(\"TasksList: Render\");\n\n    return (\n        <>\n            <section className=\"section-content\">\n            <button type=\"button\"\n                className=\"btn\"\n                onClick={() => {this.props.history.push(\"/tasks/new\") }}>\n                Add Task\n            </button>\n            </section>\n            <div className=\"container-cards\">\n                {this.state.tasks.map(task => \n                    <TasksCard \n                         key={task.id} \n                         task={task} \n                          deleteTask={this.deleteTask} \n                          {...this.props}\n                    />\n                )}\n            </div>\n        </>\n        )\n    }\n  \n\n\n\n\n\n  \n}\nexport default TasksList;\n"]},"metadata":{},"sourceType":"module"}