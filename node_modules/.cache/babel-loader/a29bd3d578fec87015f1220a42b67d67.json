{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\n\nvar GigsEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsEditForm, _Component);\n\n  function GigsEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gig: \"\",\n      date: \"\",\n      venues: [],\n      audiences: [],\n      spots: [],\n      loadingStatus: false\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.updateExistingGig = function (evt) {\n      evt.preventDefault();\n      var editedGig = {\n        name: _this.state.name,\n        date: _this.state.date,\n        venueId: _this.props.match.params.venueId,\n        audienceId: _this.props.match.params.audienceId,\n        spotId: _this.props.match.params.spotId,\n        userId: _this.props.match.params.userId\n      };\n      GigsManager.update(editedGig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n\n      _this.setState({\n        loadingStatus: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsEditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      GigsManager.get(this.props.match.params.gigId).then(function (gig) {\n        _this2.setState({\n          name: gig.name,\n          date: gig.date,\n          loadingStatus: false\n        });\n\n        var loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\"));\n        GigsManager.getAll(loggedInUserGig).then(function (gigs) {\n          return _this2.setState({\n            gigs: gigs\n          });\n        });\n        var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n        VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n          return _this2.setState({\n            venues: venues\n          });\n        });\n        var loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(function (audiences) {\n          return _this2.setState({\n            audiences: audiences\n          });\n        });\n        var loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n        SpotsManager.getAll(loggedInUserSpot).then(function (spots) {\n          return _this2.setState({\n            spots: spots\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"gig\",\n        value: this.state.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.updateExistingGig,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsEditForm;\n}(Component);\n\nexport default GigsEditForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsEditForm","state","gig","date","venues","audiences","spots","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","updateExistingGig","preventDefault","editedGig","name","venueId","props","match","params","audienceId","spotId","userId","update","then","history","push","get","gigId","loggedInUserGig","parseInt","sessionStorage","getItem","getAll","gigs","loggedInUserVenue","loggedInUserAudience","loggedInUserSpot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\n\nclass GigsEditForm extends Component {\n  //set the initial state\n  state = {\n    gig: \"\",\n    date: \"\",\n    venues: [],\n    audiences: [],\n    spots: [],\n    loadingStatus: false\n  };\n\n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n\n  updateExistingGig = evt => {\n    evt.preventDefault();\n    const editedGig = {\n        name: this.state.name,\n        date: this.state.date,\n        venueId: this.props.match.params.venueId,\n        audienceId: this.props.match.params.audienceId,\n        spotId: this.props.match.params.spotId,\n        userId: this.props.match.params.userId,\n    };\n\n    GigsManager.update(editedGig).then(() => this.props.history.push(\"/gigs\"));\n    this.setState({ loadingStatus: true });\n  };\n\n  componentDidMount() {\n    GigsManager.get(this.props.match.params.gigId).then(gig => {\n      this.setState({\n        name: gig.name,\n        date: gig.date,\n        loadingStatus: false\n      });\n\n      const loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\"));\n      GigsManager.getAll (loggedInUserGig).then(gigs =>\n        this.setState({ gigs: gigs })\n      );\n      const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n      VenuesManager.getAll(loggedInUserVenue).then(venues =>\n        this.setState({ venues: venues })\n        );\n        const loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(audiences =>\n          this.setState({ audiences: audiences })\n          );\n          const loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n          SpotsManager.getAll(loggedInUserSpot).then(spots =>\n            this.setState({ spots: spots })\n            );\n          });\n        }         \n  \n  \n  render() {  \n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"gig\"\n                value={this.state.name}\n                />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                required\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                value={this.state.date}\n              />\n              <label htmlFor=\"date\">Date</label>\n              </div>\n\n            {/* <select\n            type=\"select\"\n            required\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.gig.venueId}\n              onChange={this.handleFieldChange}\n              >\n              {this.state.venue.map(venue => (\n                <option key={venue.id} value={this.state.venueId}>\n                  {venue.name}\n                </option>\n              ))}\n              <label htmlFor=\"venue\">Venue</label>\n              </select> */}\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.updateExistingGig}\n                className=\"btn btn-primary\"\n                >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n    </>\n    );\n  }\n}\n\nexport default GigsEditForm;\n"]},"metadata":{},"sourceType":"module"}