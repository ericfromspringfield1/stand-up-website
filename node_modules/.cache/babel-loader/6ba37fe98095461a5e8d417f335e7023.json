{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\nimport \"./GigsForm.css\";\n\nvar GigsEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsEditForm, _Component);\n\n  function GigsEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      date: \"\",\n      venues: [],\n      audiences: [],\n      spots: [],\n      loadingStatus: false\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.updateExistingGig = function (evt) {\n      evt.preventDefault();\n\n      _this.setState({\n        loadingStatus: true\n      });\n\n      var editedGig = {\n        name: _this.state.gig,\n        date: _this.state.date,\n        venueId: _this.state.venueId,\n        audienceId: _this.state.audienceId,\n        spotId: _this.state.spotId,\n        // id: this.props.match.parmams.gigId,\n        userId: _this.props.match.params.userId\n      };\n      GigsManager.update(editedGig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsEditForm, [{\n    key: \"componentDidMount\",\n    //NOPE NOPE NOPE NOPE NOT YETComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig \n    //GigsEditForm will set state in ComponentDidMount function for gigs because we need it to populate the Edit Form. We don't get all\n    //because we only need this one gig to populate the form \n    // const loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\")); \n    //  GigsManager.get(loggedInUserGig).then(gig =>\n    //  this.setState({ \n    //    name: gig.name,\n    //    date: gig.date\n    //   })\n    //  );\n    //    const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\")); \n    //    VenuesManager.getAll(loggedInUserVenue).then(venues =>\n    //     this.setState({ venues: venues })\n    //     );\n    //     AudiencesManager.getAll().then(audiences =>\n    //       this.setState({ audiences: audiences })\n    //       );\n    //       SpotsManager.getAll().then(spots =>\n    //         this.setState({ spots: spots })\n    //         );\n    //       }\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      GigsManager.get(this.props.match.params.gigId).then(function (gig) {\n        _this2.setState({\n          name: gig.name,\n          date: gig.date,\n          loadingStatus: false\n        });\n      });\n      VenuesManager.get(this.props.match.params.venueid).then(function (venue) {\n        _this2.setState({\n          name: venue.name,\n          city: venue.city,\n          loadingStatus: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        value: this.state.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"venueId\",\n        value: this.state.venueId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.venues.map(function (venue) {\n        return React.createElement(\"option\", {\n          key: venue.id,\n          value: venue.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, venue.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Venue\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"audienceId\",\n        value: this.state.audienceId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.audiences.map(function (audience) {\n        return React.createElement(\"option\", {\n          key: audience.id,\n          value: audience.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, audience.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Audience Type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"spotId\",\n        value: this.state.spotId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, this.state.spots.map(function (spot) {\n        return React.createElement(\"option\", {\n          key: spot.id,\n          value: spot.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, spot.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"spot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Spot Order\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.updateExistingGig,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsEditForm;\n}(Component);\n\nexport default GigsEditForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsEditForm","state","name","date","venues","audiences","spots","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","updateExistingGig","preventDefault","editedGig","gig","venueId","audienceId","spotId","userId","props","match","params","update","then","history","push","get","gigId","venueid","venue","city","map","audience","spot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\nimport \"./GigsForm.css\";\n\nclass GigsEditForm extends Component {\n  //set the initial state\n  state = {\n    name: \"\",\n    date: \"\",\n    venues: [],\n    audiences: [],\n    spots: [],\n    loadingStatus: false\n  };\n\n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n\n  updateExistingGig = evt => {\n    evt.preventDefault();\n    this.setState({ loadingStatus: true });\n    const editedGig = {\n        name: this.state.gig,\n        date: this.state.date,\n        venueId: this.state.venueId,\n        audienceId: this.state.audienceId,\n        spotId: this.state.spotId,\n        // id: this.props.match.parmams.gigId,\n        userId: this.props.match.params.userId,\n    };\n\n    GigsManager.update(editedGig).then(() => this.props.history.push(\"/gigs\"));\n  };\n\n  //NOPE NOPE NOPE NOPE NOT YETComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig \n  //GigsEditForm will set state in ComponentDidMount function for gigs because we need it to populate the Edit Form. We don't get all\n  //because we only need this one gig to populate the form \n\n    // const loggedInUserGig = parseInt(sessionStorage.getItem(\"credentials\")); \n    //  GigsManager.get(loggedInUserGig).then(gig =>\n    //  this.setState({ \n    //    name: gig.name,\n    //    date: gig.date\n    //   })\n    //  );\n    //    const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\")); \n    //    VenuesManager.getAll(loggedInUserVenue).then(venues =>\n    //     this.setState({ venues: venues })\n    //     );\n        \n    //     AudiencesManager.getAll().then(audiences =>\n    //       this.setState({ audiences: audiences })\n    //       );\n          \n    //       SpotsManager.getAll().then(spots =>\n    //         this.setState({ spots: spots })\n    //         );\n            \n    //       }\n\n    componentDidMount() {\n      GigsManager.get(this.props.match.params.gigId)\n      .then(gig => {\n          this.setState({\n            name: gig.name,\n            date: gig.date,\n            loadingStatus: false,\n          });\n        });\n\n      VenuesManager.get(this.props.match.params.venueid)\n      .then(venue => {\n          this.setState({\n            name: venue.name,\n            city: venue.city,\n            loadingStatus: false,\n          });\n        });\n      }\n      \n        \n    \n    \n      \n    \n          \n  \n  render() {  \n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              \n              <input\n                className=\"form-control\"\n                type=\"text\"\n                onChange={this.handleFieldChange}\n                id=\"name\"\n                value={this.state.name}\n                />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                value={this.state.date}\n              />\n              <label htmlFor=\"date\">Date</label>\n              </div>\n\n              <select\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.venueId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.venues.map(venue => (\n                <option key={venue.id} value={venue.id}>\n                  {venue.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"venue\">Venue</label>\n\n            <select\n              className=\"form-control\"\n              id=\"audienceId\"\n              value={this.state.audienceId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.audiences.map(audience => (\n                <option key={audience.id} value={audience.id}>\n                  {audience.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"audience\">Audience Type</label>\n\n            <select\n              className=\"form-control\"\n              id=\"spotId\"\n              value={this.state.spotId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.spots.map(spot => (\n                <option key={spot.id} value={spot.id}>\n                  {spot.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"spot\">Spot Order</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.updateExistingGig}\n                className=\"btn btn-primary\"\n                >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n    </>\n    );\n  }\n}\n\nexport default GigsEditForm;\n"]},"metadata":{},"sourceType":"module"}