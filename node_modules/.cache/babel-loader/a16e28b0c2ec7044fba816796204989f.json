{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\nvar GigsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsForm, _Component);\n\n  function GigsForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      date: \"\",\n      venues: [],\n      venueId: \"\",\n      audiences: [],\n      audienceId: \"\",\n      spots: [],\n      spotId: 0,\n      loadingStatus: false\n    };\n\n    _this.constructNewGig = function (evt) {\n      evt.preventDefault();\n\n      if (_this.state.name === \"\" || _this.state.date === \"\" || _this.state.venueId === \"\" || _this.state.audienceId === \"\" || _this.state.audienceId === \"\") {\n        window.alert(\"Please Make A Valid Selection\");\n      } else {\n        _this.setState({\n          loadingStatus: true\n        });\n\n        var gig = {\n          name: _this.state.name,\n          date: _this.state.date,\n          venueId: _this.state.venueId,\n          audienceId: _this.state.audienceId,\n          spotId: _this.state.spotId,\n          userId: parseInt(sessionStorage.getItem(\"credentials\"))\n        };\n        GigsManager.post(gig).then(function () {\n          return _this.props.history.push(\"/gigs\");\n        });\n      }\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsForm, [{\n    key: \"componentDidMount\",\n    //ComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n      VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n        return _this2.setState({\n          venues: venues\n        });\n      });\n      AudiencesManager.getAll().then(function (audiences) {\n        return _this2.setState({\n          audiences: audiences\n        });\n      });\n      SpotsManager.getAll().then(function (spots) {\n        return _this2.setState({\n          spots: spots\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n\n    /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n    */\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        placeholder: \"Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        placeholder: \"Date Of Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"venueId\",\n        value: this.state.venueId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Please Select A Venue\"), \"}\", this.state.venues.map(function (venue) {\n        return React.createElement(\"option\", {\n          key: venue.id,\n          value: venue.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, venue.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Venue\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"audienceId\",\n        value: this.state.audienceId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"How Was The Audience?\"), this.state.audiences.map(function (audience) {\n        return React.createElement(\"option\", {\n          key: audience.id,\n          value: audience.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, audience.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Audience Type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"spotId\",\n        value: this.state.spotId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"What Spot Order Did You Perform?\"), this.state.spots.map(function (spot) {\n        return React.createElement(\"option\", {\n          key: spot.id,\n          value: spot.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, spot.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"spot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Spot Order\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.constructNewGig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsForm;\n}(Component);\n\nexport default GigsForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsForm","state","name","date","venues","venueId","audiences","audienceId","spots","spotId","loadingStatus","constructNewGig","evt","preventDefault","window","alert","setState","gig","userId","parseInt","sessionStorage","getItem","post","then","props","history","push","handleFieldChange","stateToChange","target","id","value","loggedInUserVenue","getAll","map","venue","audience","spot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\n\nclass GigsForm extends Component {\n  state = { \n    name: \"\",\n    date: \"\",\n    venues: [],\n    venueId: \"\",\n    audiences: [],\n    audienceId: \"\",\n    spots: [],\n    spotId: 0,\n    loadingStatus: false \n  };\n\n  constructNewGig = evt => {\n   evt.preventDefault();\n   if (this.state.name === \"\" || this.state.date === \"\" || this.state.venueId === \"\" ||\n   this.state.audienceId === \"\" || this.state.audienceId === \"\"){\n    window.alert(\"Please Make A Valid Selection\")\n   } else {\n      this.setState({ loadingStatus: true });\n      const gig = {   \n        name: this.state.name,\n        date: this.state.date,\n        venueId: this.state.venueId,\n        audienceId: this.state.audienceId,\n        spotId: this.state.spotId,\n        userId: parseInt(sessionStorage.getItem(\"credentials\"))\n      }\n      GigsManager.post(gig).then(() => this.props.history.push(\"/gigs\"));\n    }\n  }\n    \n    //ComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig\n    componentDidMount() {\n      const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\")); \n       VenuesManager.getAll(loggedInUserVenue).then(venues =>\n       this.setState({ venues: venues })\n       );\n\n       AudiencesManager.getAll().then(audiences =>\n       this.setState({ audiences: audiences })\n       );\n\n       SpotsManager.getAll().then(spots =>\n        this.setState({ spots: spots })\n        );\n      \n  }\n         \n                \n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n  \n  /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n  */\n\n  render() {\n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"name\"\n                placeholder=\"Gig\"\n              />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                placeholder=\"Date Of Gig\"\n              />\n              <label htmlFor=\"date\">Date</label>\n            </div>\n          \n            <select\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.venueId}\n              onChange={this.handleFieldChange}\n              >\n              <option value=\"\">Please Select A Venue</option>\n            }\n              {this.state.venues.map(venue => (\n                <option key={venue.id} value={venue.id}>\n                {venue.name} \n                </option>\n            ))}\n            </select>\n            <label htmlFor=\"venue\">Venue</label>\n            \n\n            <select\n              className=\"form-control\"\n              id=\"audienceId\"\n              value={this.state.audienceId}\n              onChange={this.handleFieldChange}\n              >\n            <option value=\"\">How Was The Audience?</option>\n              {this.state.audiences.map(audience => (\n                <option key={audience.id} value={audience.id}>\n                 {audience.name} \n                </option>\n                \n                ))}\n            </select>\n            <label htmlFor=\"audience\">Audience Type</label>\n\n            <select\n              className=\"form-control\"\n              id=\"spotId\"\n              value={this.state.spotId}\n              onChange={this.handleFieldChange}\n              >\n              <option value=\"\">What Spot Order Did You Perform?</option>\n              {this.state.spots.map(spot => (\n                <option key={spot.id} value={spot.id}>\n                  {spot.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"spot\">Spot Order</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.constructNewGig}\n                >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default GigsForm;\n"]},"metadata":{},"sourceType":"module"}