{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\nimport \"./GigsForm.css\";\n\nvar GigsEditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsEditForm, _Component);\n\n  function GigsEditForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsEditForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsEditForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      date: \"\",\n      venues: [],\n      venueId: \"\",\n      audiences: [],\n      audienceId: \"\",\n      spots: [],\n      spotId: \"\",\n      loadingStatus: false\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.updateExistingGig = function (evt) {\n      evt.preventDefault();\n\n      _this.setState({\n        loadingStatus: true\n      });\n\n      var editedGig = {\n        name: _this.state.name,\n        date: _this.state.date,\n        venue: _this.state.venueId,\n        audience: _this.state.audienceId,\n        spotId: _this.state.spotId,\n        userId: _this.props.match.params.userId\n      };\n      GigsManager.update(editedGig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsEditForm, [{\n    key: \"componentDidMount\",\n    //NOPE NOPE NOPE NOPE NOT YETComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig\n    //GigsEditForm will set state in ComponentDidMount function for gigs because we need it to populate the Edit Form. We don't get all\n    //because we only need this one gig to populate the form\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      GigsManager.get(this.props.match.params.gigId).then(function (gig) {\n        _this2.setState({\n          name: gig.name,\n          date: gig.date,\n          venueId: gig.venueId,\n          audienceId: gig.audienceId,\n          spotId: gig.spotId,\n          loadingStatus: false\n        });\n      });\n      var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n      VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n        return _this2.setState({\n          venues: venues\n        });\n      });\n      AudiencesManager.getAll().then(function (audiences) {\n        return _this2.setState({\n          audiences: audiences\n        });\n      });\n      SpotsManager.getAll().then(function (spots) {\n        return _this2.setState({\n          spots: spots\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        value: this.state.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        className: \"form-control\",\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        value: this.state.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"venueId\",\n        value: this.state.venueId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.venues.map(function (venue) {\n        return React.createElement(\"option\", {\n          key: venue.id,\n          value: venue.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, venue.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Venue\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"audienceId\",\n        value: this.state.audienceId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.audiences.map(function (audience) {\n        return React.createElement(\"option\", {\n          key: audience.id,\n          value: audience.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, audience.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Audience Type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"spotId\",\n        value: this.state.spotId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.state.spots.map(function (spot) {\n        return React.createElement(\"option\", {\n          key: spot.id,\n          value: spot.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, spot.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"spot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Spot Order\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.updateExistingGig,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsEditForm;\n}(Component);\n\nexport default GigsEditForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsEditForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsEditForm","state","name","date","venues","venueId","audiences","audienceId","spots","spotId","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","updateExistingGig","preventDefault","editedGig","venue","audience","userId","props","match","params","update","then","history","push","get","gigId","gig","loggedInUserVenue","parseInt","sessionStorage","getItem","getAll","map","spot"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\nimport \"./GigsForm.css\";\n\nclass GigsEditForm extends Component {\n  //set the initial state\n  state = {\n    name: \"\",\n    date: \"\",\n    venues: [],\n    venueId: \"\",\n    audiences: [],\n    audienceId: \"\",\n    spots: [],\n    spotId: \"\",\n    loadingStatus: false\n  };\n\n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n\n  updateExistingGig = evt => {\n    evt.preventDefault();\n    this.setState({ loadingStatus: true });\n    const editedGig = {\n      name: this.state.name,\n      date: this.state.date,\n      venue: this.state.venueId,\n      audience: this.state.audienceId,\n      spotId: this.state.spotId,\n      userId: this.props.match.params.userId\n    };\n\n    GigsManager.update(editedGig).then(() => this.props.history.push(\"/gigs\"));\n  };\n\n  //NOPE NOPE NOPE NOPE NOT YETComponentDidMount populates the Form with options and text boxes areas so the user can add a Gig\n  //GigsEditForm will set state in ComponentDidMount function for gigs because we need it to populate the Edit Form. We don't get all\n  //because we only need this one gig to populate the form\n\n\n  componentDidMount() {\n    GigsManager.get(this.props.match.params.gigId).then(gig => {\n      this.setState({\n        name: gig.name,\n        date: gig.date,\n        venueId: gig.venueId,\n        audienceId: gig.audienceId,\n        spotId: gig.spotId,\n        loadingStatus: false\n      });\n    });\n\n    const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n    VenuesManager.getAll(loggedInUserVenue).then(venues =>\n      this.setState({ venues: venues })\n    );\n    \n    AudiencesManager.getAll().then(audiences =>\n      this.setState({ audiences: audiences })\n    );\n    \n    SpotsManager.getAll().then(spots => this.setState({ spots: spots }));\n  }\n\n  render() {\n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                onChange={this.handleFieldChange}\n                id=\"name\"\n                value={this.state.name}\n              />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                className=\"form-control\"\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                value={this.state.date}\n              />\n              <label htmlFor=\"date\">Date</label>\n            </div>\n\n            <select\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.venueId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.venues.map(venue => (\n                <option key={venue.id} value={venue.id}>\n                  {venue.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"venue\">Venue</label>\n\n            <select\n              className=\"form-control\"\n              id=\"audienceId\"\n              value={this.state.audienceId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.audiences.map(audience => (\n                <option key={audience.id} value={audience.id}>\n                  {audience.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"audience\">Audience Type</label>\n\n            <select\n              className=\"form-control\"\n              id=\"spotId\"\n              value={this.state.spotId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.spots.map(spot => (\n                <option key={spot.id} value={spot.id}>\n                  {spot.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"spot\">Spot Order</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.updateExistingGig}\n                className=\"btn btn-primary\"\n              >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default GigsEditForm;\n"]},"metadata":{},"sourceType":"module"}