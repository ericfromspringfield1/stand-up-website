{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Events/EventsForm.js\";\nimport React, { Component } from 'react';\nimport EventsManager from '../../modules/EventsManager';\nimport './EventsForm.css';\n\nvar EventsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventsForm, _Component);\n\n  function EventsForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EventsForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EventsForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      date: \"\",\n      location: \"\",\n      loadingStatus: false\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    _this.constructNewEvent = function (evt) {\n      evt.preventDefault();\n\n      if (_this.state.name === \"\" || _this.state.date === \"\" || _this.state.location === \"\") {\n        window.alert(\"Please complete all fields\");\n      } else {\n        _this.setState({\n          loadingStatus: true\n        });\n\n        var event = {\n          name: _this.state.name,\n          date: _this.state.date,\n          location: _this.state.location\n        }; // Create the event and redirect user to event list\n\n        EventsManager.postEvent(event).then(function () {\n          return _this.props.history.push(\"/events\");\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EventsForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        className: \"center card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Event Form\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Event\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Date:\"), React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"location\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"location\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Location:\")), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.constructNewEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return EventsForm;\n}(Component);\n\nexport default EventsForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Events/EventsForm.js"],"names":["React","Component","EventsManager","EventsForm","state","name","date","location","loadingStatus","handleFieldChange","evt","stateToChange","target","id","value","setState","constructNewEvent","preventDefault","window","alert","event","postEvent","then","props","history","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport EventsManager from '../../modules/EventsManager';\nimport './EventsForm.css'\n\nclass EventsForm extends Component {\n    state = {\n        name: \"\",\n        date: \"\",\n        location:\"\",\n        loadingStatus: false,\n    };\n\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n    };\n\n    /*  Local method for validation, set loadingStatus, create event object, invoke the EventsManager post method, and redirect to the full eventlist\n    */\n    constructNewEvent = evt => {\n        evt.preventDefault();\n        if (this.state.name === \"\" || this.state.date === \"\"|| this.state.location === \"\") {\n            window.alert(\"Please complete all fields\");\n        } else {\n            this.setState({ loadingStatus: true });\n            const event = {\n                name: this.state.name,\n                date: this.state.date,\n                location: this.state.location\n            };\n\n            // Create the event and redirect user to event list\n            EventsManager.postEvent(event)\n            .then(() => this.props.history.push(\"/events\"));\n        }\n    };\n\n    render(){\n\n        return(\n            <>\n            <h1 className=\"center card\">Event Form</h1>\n            <form>\n                <fieldset>\n                    <div className=\"formgrid\">\n                        <input\n                        type=\"text\"\n                        required\n                        onChange={this.handleFieldChange}\n                        id=\"name\"\n\n                        />\n                        <label htmlFor=\"name\">Event</label>\n                        <input\n                        type=\"date\"\n                        required\n                        onChange={this.handleFieldChange}\n                        id=\"date\"\n\n                        />\n                        <label htmlFor=\"date\">Date:</label>\n                        <input\n                        type=\"text\"\n                        required\n                        onChange={this.handleFieldChange}\n                        id=\"location\"\n\n                        />\n                        <label htmlFor=\"location\">Location:</label>\n                    </div>\n                    <div className=\"alignRight\">\n                        <button\n                        type=\"button\"\n                        disabled={this.state.loadingStatus}\n                        onClick={this.constructNewEvent}\n                        >Submit</button>\n                    </div>\n                </fieldset>\n            </form>\n        </>\n        )\n    }\n}\n\nexport default EventsForm"]},"metadata":{},"sourceType":"module"}