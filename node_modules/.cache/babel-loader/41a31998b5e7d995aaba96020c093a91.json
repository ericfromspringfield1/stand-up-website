{"ast":null,"code":"import _classCallCheck from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js\";\nimport React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\nvar GigsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GigsForm, _Component);\n\n  function GigsForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GigsForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GigsForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gig: \"\",\n      date: \"\",\n      venues: [],\n      audiences: [],\n      spots: [],\n      loadingStatus: false\n    };\n\n    _this.constructNewGig = function (evt) {\n      evt.preventDefault();\n\n      _this.setState({\n        loadingStatus: true\n      });\n\n      GigsManager.post(gig).then(function () {\n        return _this.props.history.push(\"/gigs\");\n      });\n      var gig = {\n        name: _this.state.name,\n        date: _this.state.date,\n        venuedId: parseInt(sessionStorage.getItem(\"venueId\")),\n        audienceId: parseInt(sessionStorage.getItem(\"venueId\")),\n        spotId: parseInt(sessionStorage.getItem(\"venueId\")),\n        userId: _this.props.match.params.userId\n      };\n    };\n\n    _this.handleFieldChange = function (evt) {\n      var stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n\n      _this.setState(stateToChange);\n    };\n\n    return _this;\n  }\n\n  _createClass(GigsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      VenuesManager.getAll(this.props.match.params.id).then(function (venue) {\n        _this2.setState({\n          venue: venue\n        });\n\n        AudiencesManager.getAll(_this2.props.match.params.id).then(function (audience) {\n          _this2.setState({\n            audience: audience\n          });\n        });\n        SpotsManager.getAll(_this2.props.match.params.id).then(function (spot) {\n          _this2.setState({\n            name: spot\n          });\n        });\n        var loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n        VenuesManager.getAll(loggedInUserVenue).then(function (venues) {\n          return _this2.setState({\n            venues: venues\n          });\n        });\n        var loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(function (audiences) {\n          return _this2.setState({\n            audiences: audiences\n          });\n        });\n        var loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n        SpotsManager.getAll(loggedInUserSpot).then(function (spots) {\n          return _this2.setState({\n            spots: spots\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n\n    /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n    */\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formgrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"name\",\n        placeholder: \"Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Gig\"), React.createElement(\"input\", {\n        type: \"date\",\n        required: true,\n        onChange: this.handleFieldChange,\n        id: \"date\",\n        placeholder: \"Date Of Gig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Date\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"venueId\",\n        value: this.state.venueId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.venues.map(function (venue) {\n        return React.createElement(\"option\", {\n          key: venue.id,\n          value: venue.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, venue.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"venue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Venue\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"audienceId\",\n        value: this.state.audienceId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, this.state.audiences.map(function (audience) {\n        return React.createElement(\"option\", {\n          key: audience.id,\n          value: audience.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, audience.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"audience\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Audience Type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"spotId\",\n        value: this.state.spotId,\n        onChange: this.handleFieldChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.spots.map(function (spot) {\n        return React.createElement(\"option\", {\n          key: spot.id,\n          value: spot.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, spot.name);\n      })), React.createElement(\"label\", {\n        htmlFor: \"spot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Spot Order\"), React.createElement(\"div\", {\n        className: \"alignRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        disabled: this.state.loadingStatus,\n        onClick: this.constructNewGig,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return GigsForm;\n}(Component);\n\nexport default GigsForm;","map":{"version":3,"sources":["/Users/erictaylor/workspace/capstone-front-end/reactive-nutshell-ain-t-salty/src/components/Gigs/GigsForm.js"],"names":["React","Component","GigsManager","VenuesManager","AudiencesManager","SpotsManager","GigsForm","state","gig","date","venues","audiences","spots","loadingStatus","constructNewGig","evt","preventDefault","setState","post","then","props","history","push","name","venuedId","parseInt","sessionStorage","getItem","audienceId","spotId","userId","match","params","handleFieldChange","stateToChange","target","id","value","getAll","venue","audience","spot","loggedInUserVenue","loggedInUserAudience","loggedInUserSpot","venueId","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GigsManager from \"../../modules/GigsManager\";\nimport \"./GigsForm.css\";\nimport VenuesManager from \"../../modules/VenuesManager\";\nimport AudiencesManager from \"../../modules/AudiencesManager\";\nimport SpotsManager from \"../../modules/SpotsManager\";\n\n\nclass GigsForm extends Component {\n  state = {\n    gig: \"\",\n    date: \"\",\n    venues: [],\n    audiences: [],\n    spots: [],\n    loadingStatus: false \n  };\n\n  constructNewGig = evt => {\n   evt.preventDefault();\n   \n      this.setState({ loadingStatus: true });\n      GigsManager.post(gig).then(() => this.props.history.push(\"/gigs\"));\n      const gig = {   \n        name: this.state.name,\n        date: this.state.date,\n        venuedId: parseInt(sessionStorage.getItem(\"venueId\")),\n        audienceId: parseInt(sessionStorage.getItem(\"venueId\")),\n        spotId: parseInt(sessionStorage.getItem(\"venueId\")),\n        userId: this.props.match.params.userId,\n      }\n    }\n    \n    componentDidMount() {\n      VenuesManager.getAll(this.props.match.params.id).then(venue => {\n        this.setState({\n          venue: venue\n        });\n        \n        AudiencesManager.getAll(this.props.match.params.id).then(audience => {\n          this.setState({\n            audience: audience\n          });\n        })\n        SpotsManager.getAll(this.props.match.params.id).then(spot => {\n          this.setState({\n            name: spot\n          });\n        })\n        \n      \n        const loggedInUserVenue = parseInt(sessionStorage.getItem(\"credentials\"));\n        VenuesManager.getAll(loggedInUserVenue).then(venues =>\n        this.setState({ venues: venues })\n        );\n        const loggedInUserAudience = parseInt(sessionStorage.getItem(\"credentials\"));\n        AudiencesManager.getAll(loggedInUserAudience).then(audiences =>\n          this.setState({ audiences: audiences })\n          );\n          const loggedInUserSpot = parseInt(sessionStorage.getItem(\"credentials\"));\n          SpotsManager.getAll(loggedInUserSpot).then(spots =>\n            this.setState({ spots: spots })\n            );\n      \n    })\n  }\n        \n        \n                \n  handleFieldChange = evt => {\n    const stateToChange = {};\n    stateToChange[evt.target.id] = evt.target.value;\n    this.setState(stateToChange);\n  };\n  \n  /*  Local method for validation, set loadingStatus, create gig object, invoke the GigsManager post method, and redirect to the full gig list\n  */\n\n  render() {\n    return (\n      <>\n        <form>\n          <fieldset>\n            <div className=\"formgrid\">\n              <input\n                type=\"text\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"name\"\n                placeholder=\"Gig\"\n              />\n              <label htmlFor=\"gig\">Gig</label>\n\n              <input\n                type=\"date\"\n                required\n                onChange={this.handleFieldChange}\n                id=\"date\"\n                placeholder=\"Date Of Gig\"\n              />\n              <label htmlFor=\"date\">Date</label>\n            </div>\n\n            <select\n              className=\"form-control\"\n              id=\"venueId\"\n              value={this.state.venueId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.venues.map(venue => (\n                <option key={venue.id} value={venue.id}>\n                  {venue.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"venue\">Venue</label>\n\n            <select\n              className=\"form-control\"\n              id=\"audienceId\"\n              value={this.state.audienceId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.audiences.map(audience => (\n                <option key={audience.id} value={audience.id}>\n                  {audience.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"audience\">Audience Type</label>\n\n            <select\n              className=\"form-control\"\n              id=\"spotId\"\n              value={this.state.spotId}\n              onChange={this.handleFieldChange}\n            >\n              {this.state.spots.map(spot => (\n                <option key={spot.id} value={spot.id}>\n                  {spot.name}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"spot\">Spot Order</label>\n\n            <div className=\"alignRight\">\n              <button\n                type=\"button\"\n                disabled={this.state.loadingStatus}\n                onClick={this.constructNewGig}\n              >\n                Submit\n              </button>\n            </div>\n          </fieldset>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default GigsForm;\n"]},"metadata":{},"sourceType":"module"}